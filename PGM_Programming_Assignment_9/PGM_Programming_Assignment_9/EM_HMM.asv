% File: EM_HMM.m
%
% Copyright (C) Daphne Koller, Stanford Univerity, 2012

function [P loglikelihood ClassProb PairProb] = EM_HMM(actionData, poseData, G, InitialClassProb, InitialPairProb, maxIter)

% INPUTS
% actionData: structure holding the actions as described in the PA
% poseData: N x 10 x 3 matrix, where N is number of poses in all actions
% G: graph parameterization as explained in PA description
% InitialClassProb: N x K matrix, initial allocation of the N poses to the K
%   states. InitialClassProb(i,j) is the probability that example i belongs
%   to state j.
%   This is described in more detail in the PA.
% InitialPairProb: V x K^2 matrix, where V is the total number of pose
%   transitions in all HMM action models, and K is the number of states.
%   This is described in more detail in the PA.
% maxIter: max number of iterations to run EM

% OUTPUTS
% P: structure holding the learned parameters as described in the PA
% loglikelihood: #(iterations run) x 1 vector of loglikelihoods stored for
%   each iteration
% ClassProb: N x K matrix of the conditional class probability of the N examples to the
%   K states in the final iteration. ClassProb(i,j) is the probability that
%   example i belongs to state j. This is described in more detail in the PA.
% PairProb: V x K^2 matrix, where V is the total number of pose transitions
%   in all HMM action models, and K is the number of states. This is
%   described in more detail in the PA.

% Initialize variables
N = size(poseData, 1);
K = size(InitialClassProb, 2);
L = size(actionData, 2); % number of actions
V = size(InitialPairProb, 1);

ClassProb = InitialClassProb;
PairProb = InitialPairProb;

loglikelihood = zeros(maxIter,1);

P.c = [];
P.clg.sigma_x = [];
P.clg.sigma_y = [];
P.clg.sigma_angle = [];

% EM algorithm
for iter=1:maxIter
  
  % M-STEP to estimate parameters for Gaussians
  % Fill in P.c, the initial state prior probability (NOT the class probability as in PA8 and EM_cluster.m)
  % Fill in P.clg for each body part and each class
  % Make sure to choose the right parameterization based on G(i,1)
  % Hint: This part should be similar to your work from PA8 and EM_cluster.m
  
  P.c = zeros(1,K);
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % YOUR CODE HERE
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
  for a=1:L
    for k=1:K
      P.c(k) = P.c(k) + ClassProb(actionData(a).marg_ind(1), k);
    end
  end
  P.c = P.c/sum(P.c);
  P.clg = repmat(struct('mu_y',zeros(1,K),'sigma_y',zeros(1,K),'mu_x',zeros(1,K),'sigma_x',zeros(1,K),'mu_angle',zeros(1,K),'sigma_angle',zeros(1,K),'theta',zeros(K,12)),1,10);
  
  for i=1:10
    if(G(i,1)==0)
        for k=1:K
            [P.clg(i).mu_y(k) P.clg(i).sigma_y(k)] = FitG(poseData(:,i,1),ClassProb(:,k));
            [P.clg(i).mu_x(k) P.clg(i).sigma_x(k)] = FitG(poseData(:,i,2),ClassProb(:,k));
            [P.clg(i).mu_angle(k) P.clg(i).sigma_angle(k)] = FitG(poseData(:,i,3),ClassProb(:,k));
        end
    else
        for k=1:K
            [Beta sigma] = FitLG(poseData(:,i,1), reshape(poseData(:,G(i,2),:),N,3), ClassProb(:,k));
            P.clg(i).theta(k,2:4)=Beta(1:3);
            P.clg(i).theta(k,1)=Beta(4);
            P.clg(i).sigma_y(k) = sigma;
            [Beta sigma] = FitLG(poseData(:,i,2), reshape(poseData(:,G(i,2),:),N,3),ClassProb(:,k));
            P.clg(i).theta(k,6:8)=Beta(1:3);
            P.clg(i).theta(k,5)=Beta(4);
            P.clg(i).sigma_x(k) = sigma;
            [Beta sigma] = FitLG(poseData(:,i,3), reshape(poseData(:,G(i,2),:),N,3),ClassProb(:,k));
            P.clg(i).theta(k,10:12)=Beta(1:3);
            P.clg(i).theta(k,9)=Beta(4);
            P.clg(i).sigma_angle(k) = sigma;
        end
    end
  end
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  % M-STEP to estimate parameters for transition matrix
  % Fill in P.transMatrix, the transition matrix for states
  % P.transMatrix(i,j) is the probability of transitioning from state i to state j
  P.transMatrix = zeros(K,K);
  
  % Add Dirichlet prior based on size of poseData to avoid 0 probabilities
  P.transMatrix = P.transMatrix + size(PairProb,1) * .05;
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % YOUR CODE HERE
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    T = zeros(K,K);
    for a = 1:L
      for e = actionData(a).pair_ind
          tempTran = reshape(PairProb(e,:),K,K);
          T = T + tempTran;
      end
    end
    T = P.transMatrix + T;
    for i=1:K
        T(i,:) = T(i,:)./sum(T(i,:));
    end;
    P.transMatrix = T;
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
    
  % E-STEP preparation: compute the emission model factors (emission probabilities) in log space for each 
  % of the poses in all actions = log( P(Pose | State) )
  % Hint: This part should be similar to (but NOT the same as) your code in EM_cluster.m
  
  logEmissionProb = zeros(N,K);
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % YOUR CODE HERE
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  for e=1:N
    for k=1:K
      for p=1:10
        
        parentpart = 0;
        parentals = [];

        if G(p, 1) == 1
          parentpart = G(p, 2);
          parent_y = poseData(e, parentpart, 1);
          parent_x = poseData(e, parentpart, 2);
          parent_alpha = poseData(e, parentpart, 3);
          parentals = [ parent_y parent_x parent_alpha ];
        end
        
        if (parentpart == 0)
          pdf_y = lognormpdf(poseData(e, p, 1), P.clg(p).mu_y(k), P.clg(p).sigma_y(k));
          pdf_x = lognormpdf(poseData(e, p, 2), P.clg(p).mu_x(k), P.clg(p).sigma_x(k));
          pdf_angle = lognormpdf(poseData(e, p, 3), P.clg(p).mu_angle(k), P.clg(p).sigma_angle(k));
          logEmissionProb(e, k) = sum( [ logEmissionProb(e, k) pdf_y pdf_x pdf_angle ] );
        else
          pdf_y = lognormpdf(poseData(e, p, 1), P.clg(p).theta(k, 1) + parentals * P.clg(p).theta(k, 2:4)', P.clg(p).sigma_y(k));
          pdf_x = lognormpdf(poseData(e, p, 2), P.clg(p).theta(k, 5) + parentals * P.clg(p).theta(k, 6:8)', P.clg(p).sigma_x(k));
          pdf_angle = lognormpdf(poseData(e, p, 3), P.clg(p).theta(k, 9) + parentals * P.clg(p).theta(k, 10:12)', P.clg(p).sigma_angle(k));
          
          logEmissionProb(e, k) = sum( [ logEmissionProb(e, k) pdf_y pdf_x pdf_angle ] );
        end

      end
    end
  end
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
    
  % E-STEP to compute expected sufficient statistics
  % ClassProb contains the conditional class probabilities for each pose in all actions
  % PairProb contains the expected sufficient statistics for the transition CPDs (pairwise transition probabilities)
  % Also compute log likelihood of dataset for this iteration
  % You should do inference and compute everything in log space, only converting to probability space at the end
  % Hint: You should use the logsumexp() function here to do probability normalization in log space to avoid numerical issues
  
  ClassProb = zeros(N,K);
  PairProb = zeros(V,K^2);
  loglikelihood(iter) = 0;
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % YOUR CODE HERE
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  for action=1:L
    
    M = length(actionData(action).marg_ind);
    factorList = repmat(struct ('var', [], 'card', [], 'val', []), 1, 2 * M );
    currentF = 1;
    

    factorList(currentF).var = 1;
    factorList(currentF).card = [ K ];
    factorList(currentF).val = log(P.c);
    assert(all(size(factorList(currentF).val) == [ 1 prod(factorList(currentF).card) ]));
    currentF = currentF + 1;
  
    
    for i=2:M
      this = actionData(action).marg_ind(i);
      prev = actionData(action).marg_ind(i-1);
      factorList(currentF).var = [i-1 i];
      factorList(currentF).card = [ K K ];
      factorList(currentF).val = log(P.transMatrix(:)');
      assert(all(size(factorList(currentF).val) == [ 1 prod(factorList(currentF).card) ]));
      currentF = currentF + 1;
    end
    
    for i = 1:M
      factorList(currentF).var = [i];
      factorList(currentF).card = [K];
      factorList(currentF).val = logEmissionProb(actionData(action).marg_ind(i), :);
      assert(all(size(factorList(currentF).val) == [ 1 prod(factorList(currentF).card) ]));
      currentF = currentF + 1;
    end
    
    [Marginals PCalibrated] = ComputeExactMarginalsHMM(factorList);

    for i=1:M
      ClassProb(actionData(action).marg_ind(i), :) = exp(Marginals(i).val);
    end
    
    for i=1:length(actionData(action).pair_ind)
      pair_ind = actionData(action).pair_ind(i);
      fromPose = i;
      toPose = i+1;
      for j=1:length(PCalibrated.cliqueList)
        if all(ismember([fromPose toPose], PCalibrated.cliqueList(j).var))
          PairProb(pair_ind, :) = exp(PCalibrated.cliqueList(j).val - logsumexp(PCalibrated.cliqueList(j).val));
          break;
        end
      end
    end

    loglikelihood(iter) = loglikelihood(iter) + logsumexp(PCalibrated.cliqueList(end).val);

  end
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  % Print out loglikelihood
  disp(sprintf('EM iteration %d: log likelihood: %f', ...
    iter, loglikelihood(iter)));
  if exist('OCTAVE_VERSION')
    fflush(stdout);
  end
  
  % Check for overfitting by decreasing loglikelihood
  if iter > 1
    if loglikelihood(iter) < loglikelihood(iter-1)
      break;
    end
  end
  
end

% Remove iterations if we exited early
loglikelihood = loglikelihood(1:iter);
